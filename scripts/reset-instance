#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    Reset the Instance
    ~~~~~~~~~~~~~~~~~~

    This script resets the development instance.

    :copyright: (c) 2009 by the pyClanSphere Team, see AUTHORS for more details.
    :license: BSD, see LICENSE for more details.
"""
import sys
from os import mkdir, path, listdir, unlink
from shutil import rmtree
from optparse import OptionParser


sys.path.append(path.dirname(__file__))
from _init_pyClanSphere import find_instance


def main():
    parser = OptionParser(usage='%prog [path]')
    parser.add_option('--username', '-u', dest='username', default='admin')
    parser.add_option('--password', '-p', dest='password', default='default')
    parser.add_option('--clan-url', dest='site_url', default='http://localhost:4000/')
    parser.add_option('--database', dest='database_uri', default='sqlite:///pyClanSphere.db')
    parser.add_option('--language', dest='lang', default='en')
    parser.add_option('--keep-plugins', default=False, action='store_true')

    options, args = parser.parse_args()
    if not args:
        instance = find_instance()
        if instance is None:
            parser.error('instance not found.  Specify path to instance')
    elif len(args) == 1:
        instance = args[0]
    else:
        parser.error('incorrent number of arguments')

    print 'Resetting instance', instance

    if not options.keep_plugins:
        rmtree(instance)
        mkdir(instance)
    else:
        for file in listdir(instance):
            fpath = path.join(instance, file)
            if path.isfile(fpath):
                unlink(fpath)
            elif path.isdir(fpath) and file != 'plugins':
                rmtree(fpath)

    import pyClanSphere.application
    from pyClanSphere import setup
    from pyClanSphere.database import users, init_database, db
    from pyClanSphere.utils.crypto import gen_pwhash, gen_secret_key
    from pyClanSphere.config import Configuration
    e = db.create_engine(options.database_uri, instance)
    init_database(e)

    cfg = Configuration(path.join(instance, 'pyClanSphere.ini'))
    t = cfg.edit()
    t.update(
        maintenance_mode=False,
        site_url=options.site_url,
        secret_key=gen_secret_key(),
        database_uri=options.database_uri,
        language=options.lang,
        plugins='vessel_theme',
        theme='vessel'
    )
    t.commit()

    from pyClanSphere.models import User
    from pyClanSphere.privileges import CLAN_ADMIN
    app = setup(instance)
    user = User(options.username, options.password, 'admin@localhost',
                is_author=True)
    user.own_privileges.add(CLAN_ADMIN)
    db.commit()

    print 'All done.'


if __name__ == '__main__':
    main()
